#!/bin/bash
# mac-dev-setup Development Environment Setup
# https://github.com/mgomesborges/mac-dev-setup
#
# Copyright (c) Marcos Gomes-Borges

VERSION="0.3.0"
PREFIX="${HOME}"

red="\033[91m%b\033[39m"
green="\033[92m%b\033[39m"
magenta="\033[95m%b\033[39m"

set -euo pipefail

usage() {
cat <<EOF
    Usage: install [OPTIONS]

    OPTION          MEANING
    --help          Display this help message
    --version       Display the mac-dev-setup install version

    git             Install and set up Git
    gitconfig       Set up Git
    bash            Update and set up Bash as the default shell
    bashconfig      Improve Bash
    zsh             Setup Oh My Zsh + Powerlevel9k + Nerd font
EOF
}

print_version() {
    printf "mac-dev-setup install ${VERSION}\n"
}

usage_fatal() {
    usage
    printf "${red}" "\nError: "
    printf "Illegal option!\n"
}

wait_for_user() {
    printf "\nPress RETURN to continue or any other key to abort!\n"

    read -rsn 1 key
    if [[ ${key} != "" ]]; then
        exit 0
    fi
}

wait_for_sudo() {
    trap "exit 1" SIGINT # Process Interruption Ctrl-C

    # Check if sudo password has been entered
    # If not, request sudo password
    if sudo -vn 2>/dev/null; then
        printf "${magenta}" "\n[sudo] this script is using sudo privileges!\n\n"
    else
        printf "\n[sudo] Enter password for ${USER}\n"
        sudo -v
    fi

    # Abort if no sudo privileges
    if ! sudo -vn 2>/dev/null; then
        printf "${red}" "Aborted: "
        printf "this script needs sudo privileges!\n"
        exit 1
    fi
}

# Check if Homebrew is installed and update it
homebrew_update() {
    if command -v brew &>/dev/null; then
        printf "${magenta}" "Updating Homebrew!\n"
        brew update
    else
        BREW_URL='/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'

        printf "Homebrew is required for the installation.\n\n"
        printf "Install homebrew using the following command:\n"
        printf "${BREW_URL}\n"
        printf "${red}" "\nError: "
        printf "Homebrew is not installed!\n"
        exit 1
    fi
}

devsetup_git_config() {
    printf "${magenta}" "\nSet up Git - Ctrl+C to cancel\n"

    printf "git config --global user.name 'Your name': "
    read -r GIT_USER_NAME

    printf "git config --global user.email 'your@email.com': "
    read -r GIT_USER_EMAIL

    # Confirm user input
    printf "${magenta}" "\nUser Name: "
    printf "${GIT_USER_NAME}\n"
    printf "${magenta}" "E-mail   : "
    printf "${GIT_USER_EMAIL}\n"

    wait_for_user

    # Set git user name and email
    git config --global user.name "${GIT_USER_NAME}"
    git config --global user.email "${GIT_USER_EMAIL}"

    # Set git terminal colors
    git config --global color.ui true
    git config --global color.status.changed "blue normal"
    git config --global color.status.untracked "red normal"
    git config --global color.status.added "magenta normal"
    git config --global color.status.updated "green normal"
    git config --global color.status.branch "yellow normal bold"
    git config --global color.status.header "white normal bold"

    printf "${green}" "\nGit setup completed.\n"
}

devsetup_install_git() {
    printf "${magenta}" "Install and set up Git!\n"

    homebrew_update

    printf "${magenta}" "Installing Git!\n"
    brew install git || true

    devsetup_git_config

    printf "${green}" "\nGit installation successful.\n"
}

###############################################################################
set +e

# INPUTRC
read -r -d '' INPUTRC <<EOF
"\e[A":history-search-backward
"\e[B":history-search-forward

set colored-stats on
set mark-symlinked-directories on
set show-all-if-ambiguous on
set show-all-if-unmodified on
set visible-stats on
set completion-ignore-case on
TAB: menu-complete
EOF

# BASH_PROFILE
read -r -d '' BASH_PROFILE <<"EOF"
#!/bin/bash
# Bash Profile for macOS
# Copyright (c) Marcos Gomes-Borges
# https://github.com/mgomesborges/mac-dev-setup

# LS Colors
# CLICOLOR use ANSI color sequences to distinguish file types
export CLICOLOR=true
export LSCOLORS=gxegbxdxcxahadabafacge
alias ls='ls -GFh'

# Bash Colors and formatting
CYAN="\[\e[38;5;6m\]"
MAGENTA="\[\e[38;5;13m\e[1m\]"
SKYBLUE="\[\e[38;5;25m\e[1m\]"
NONE="\[\e[0m\e[21m\]"

# Prevent Mac OS ._ in in tar.gz files
export COPYFILE_DISABLE=true

# Homebrew
export PATH="/usr/local/bin:${PATH}"

# Homebrew completion
if [[ -f "$(brew --prefix)/etc/bash_completion.d/brew" ]]; then
    source "$(brew --prefix)/etc/bash_completion.d/brew"
fi

# Bash completion@2
if [[ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]]; then
    source "$(brew --prefix)/etc/profile.d/bash_completion.sh"
fi

# Bash-Git-prompt
if [[ -f "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh" ]]; then
    GIT_PS1_SHOWCOLORHINTS=true
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_SHOWUNTRACKEDFILES=true
    GIT_PS1_DESCRIBE_STYLE='default'
    source "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh"
fi

# exa is a replacement for ls https://github.com/ogham/exa
if command -v exa 1>/dev/null 2>&1; then
    alias ls="exa --group-directories-first --classify"
fi

# Python virtual environment
# Allow pip only for active virtual environment
# Use 'gpip' for global environment
export PIP_REQUIRE_VIRTUALENV=true
gpip(){
    PIP_REQUIRE_VIRTUALENV="" pip "${@}"
}

# Pyenv Python version management
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    pyenv virtualenvwrapper
fi

# PRIMARY PROMPT
PROMPT_COMMAND='__git_ps1\
                "\n${MAGENTA}[\d \t] ${SKYBLUE}$(python --version 2>&1)${NONE}\
                \n\u@\h: ${CYAN}\w${NONE}"\
                "\n${VIRTUAL_ENV:+($(basename ${VIRTUAL_ENV}))}\\$ "\
                " (%s)"'
EOF

set -e
###############################################################################

devsetup_bash_config() {
    printf "${magenta}" "Set up and improve Bash\n"

    printf "${magenta}" "Set up the command line history search\n"
    echo "${INPUTRC}" > "${HOME}/.inputrc"

    printf "${magenta}" "Backup the current .bash_profile file\n"
    if [[ -f "${HOME}/.bash_profile" ]]; then
        cp "${HOME}/.bash_profile" "${HOME}/.bash_profile.bkp"
    fi

    printf "${magenta}" "Update the .bash_profile\n"
    echo "${BASH_PROFILE}" > "${HOME}/.bash_profile"

    printf "${magenta}" "Install bash-completion\n"
    brew install bash-completion@2

    printf "${magenta}" "Install docker command-line completion\n"
    brew install docker-completion docker-machine-completion docker-compose-completion

    printf "${magenta}" "Install exa\n"
    brew install exa

    printf "${green}" "\nBash setup completed.\n"
}

devsetup_install_bash() {
    printf "${magenta}" "Update and set up Bash as the default shell\n"

    wait_for_sudo
    homebrew_update
    brew install bash

    if $(grep -Fxq "/usr/local/bin/bash" /etc/shells); then
        printf "${magenta}" "The list of shells is already updated!\n"
    else
        printf "${magenta}" "Adding the new shell to the list of allowed shells\n"
        sudo echo "/usr/local/bin/bash" >> /etc/shells
    fi

    printf "${magenta}" "Changing to the new shell\n"
    chsh -s "/usr/local/bin/bash"

    devsetup_bash_config

    printf "${green}" "\nBash installation successful!\n"

    printf "${magenta}" "\nClose and reopen the Terminal!\n"
}

###############################################################################
set +e

# ZSH_PROFILE
read -r -d '' ZSH_PROFILE <<"EOF"
#!/bin/bash
# Zsh Profile for macOS
# Copyright (c) Marcos Gomes-Borges
# https://github.com/mgomesborges/mac-dev-setup

# POWERLEVEL THEME SETTINGS
############################################################
# Must have a nerd font installed
POWERLEVEL9K_MODE="nerdfont-complete"

# POWERLEVEL9K_COLOR_SCHEME="dark"
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=""
POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="%# "

POWERLEVEL9K_ALWAYS_SHOW_USER=true
POWERLEVEL9K_ALWAYS_SHOW_CONTEXT=true
POWERLEVEL9K_CONTEXT_TEMPLATE="mgomesborges" # "%n@%m"

POWERLEVEL9K_CONTEXT_DEFAULT_BACKGROUND="white"
POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND="black"

# Long paths truncation strategy
POWERLEVEL9K_SHORTEN_STRATEGY=""
POWERLEVEL9K_SHORTEN_DIR_LENGTH=2

# Dir home foreground and background
POWERLEVEL9K_HOME_ICON=""
POWERLEVEL9K_HOME_SUB_ICON=""
POWERLEVEL9K_FOLDER_ICON=""
POWERLEVEL9K_ETC_ICON=""

POWERLEVEL9K_DIR_DEFAULT_BACKGROUND="025"
POWERLEVEL9K_DIR_DEFAULT_FOREGROUND="white"
POWERLEVEL9K_DIR_HOME_BACKGROUND="025"
POWERLEVEL9K_DIR_HOME_FOREGROUND="white"
POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND="025"
POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND="white"

# Displays a lock icon if you do not have write permissions on the folder
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_BACKGROUND="white"
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND="red"

# Time
POWERLEVEL9K_TIME_FORMAT="%D{%d/%m %H:%M:%S}"

# Current Python virtual environment
POWERLEVEL9K_VIRTUALENV_BACKGROUND="220"
POWERLEVEL9K_VIRTUALENV_FOREGROUND="black"

# Current Python version
POWERLEVEL9K_CUSTOM_PYTHON_VERSION="zsh_python_version"
POWERLEVEL9K_CUSTOM_PYTHON_VERSION_BACKGROUND="024"
POWERLEVEL9K_CUSTOM_PYTHON_VERSION_FOREGROUND="white"

zsh_python_version(){
    local virtualenv_path="$VIRTUAL_ENV"
    # Early exit; $virtualenv_path must always be set
    [[ -z "$virtualenv_path" ]] && return
    python_version=$(python --version 2>&1)
    echo ${python_version/"Python"/""}
}

# Prompt elements
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
    context
    dir
    dir_writable
    virtualenv
    custom_python_version
    rbenv
)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
    background_jobs
    rvm
    vcs
    time
)

# OH MY ZSH SETTINGS
############################################################
# Path to oh-my-zsh installation
export ZSH="${HOME}/.oh-my-zsh"

# ZSH Terminal title
DISABLE_AUTO_TITLE=true
# echo -ne "\e]1;TERMINAL_TITLE\a"

# Username which by default will not be shown
export DEFAULT_USER="$USER"

# Set name of the theme to load
ZSH_THEME="powerlevel9k/powerlevel9k"

# Disable Oh My Zsh automatic update
DISABLE_UPDATE_PROMPT="true"

# Plugins
plugins=(
    git
    gitfast
    python
    pip
    pipenv
    virtualenv
    docker
    docker-compose
    kubectl
    zsh-completions
    zsh-syntax-highlighting
)

# Reload for zsh-completions
autoload -U compinit && compinit
source $ZSH/oh-my-zsh.sh

# User configuration
############################################################

# exa is a replacement for ls https://github.com/ogham/exa
if command -v exa 1>/dev/null 2>&1; then
    alias ls="exa --group-directories-first --classify"
fi

# Python virtual environment
# Allow pip only for active virtual environment
# Use 'gpip' for global environment
export PIP_REQUIRE_VIRTUALENV=true
gpip(){
    PIP_REQUIRE_VIRTUALENV="" pip "${@}"
}

# Pyenv Python version management
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    pyenv virtualenvwrapper
fi
EOF

set -e
###############################################################################

devsetup_install_zsh() {
    printf "${magenta}" "Set up Oh My Zsh + Powerlevel9k + Nerd font\n"

    printf "${magenta}" "Update and select Zsh as the default shell\n"
    brew install zsh

    printf "${magenta}" "Add the new shell to the list of allowed shells\n"
    if $(grep -Fxq "/usr/local/bin/zsh" /etc/shells); then
        printf "${magenta}" "The list of shells is already updated!\n"
    else
        sudo echo "/usr/local/bin/zsh" >> /etc/shells
    fi

    printf "${magenta}" "Change to the new shell\n"
    chsh -s "/usr/local/bin/zsh"

    printf "${magenta}" "Install Oh My Zsh\n"
    URL="https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh"
    sh <(curl -fsSL ${URL}) --unattended

    printf "${magenta}" "Install Nerd Font\n"
    brew tap homebrew/cask-fonts
    brew cask install font-hack-nerd-font

    printf "${magenta}" "Install Powerlevel9k theme\n"
    URL="https://github.com/bhilburn/powerlevel9k.git"
    DIR="${HOME}/.oh-my-zsh/custom/themes/powerlevel9k"
    git clone "${URL}" "${DIR}"

    printf "${magenta}" "Install zsh-completions\n"
    URL="https://github.com/zsh-users/zsh-completions"
    DIR="${ZSH_CUSTOM:=${HOME}/.oh-my-zsh/custom}/plugins/zsh-completions"
    git clone "${URL}" "${DIR}"

    printf "${magenta}" "Install syntax highlighting\n"
    URL="https://github.com/zsh-users/zsh-syntax-highlighting.git"
    DIR="${ZSH_CUSTOM:-${HOME}/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting"
    git clone "${URL}" "${DIR}"

    printf "${magenta}" "Install exa\n"
    brew install exa

    printf "${magenta}" "Backup the current .zshrc file\n"
    if [[ -f "${HOME}/.zshrc" ]]; then
        cp "${HOME}/.zshrc" "${HOME}/.zshrc.bkp"
    fi

    printf "${magenta}" "Update the .zshrc\n"
    echo "${ZSH_PROFILE}" > "${HOME}/.zshrc"

    printf "${green}" "\nZsh installation successful!\n"

    printf "${red}" "\nCaveats: "
    printf "
        Follow the mac-dev-setup tutorial to set up the Terminal
        and enable antialias text, bold fonts, ANSI colors, bright colors,
        and the new Nerd Font.

        https://github.com/mgomesborges/mac-dev-setup/blob/master/docs/terminal-zsh-setup.md
    "

    printf "${red}" "\nClose and reopen the Terminal!\n"
}

# Parse mac-dev-setup options
while [[ "${#}" -gt 0 ]]; do
    case "${1}" in
        --help)
            print_version
            usage
            exit 0
            ;;
        --version)
            print_version
            exit 0
            ;;
        git)
            devsetup_install_git
            exit 0
            ;;
        gitconfig)
            devsetup_git_config
            exit 0
            ;;
        bash)
            devsetup_install_bash
            exit 0
            ;;
        bashconfig)
            devsetup_bash_config
            exit 0
            ;;
        zsh)
            devsetup_install_zsh
            exit 0
            ;;
        --|-*|*)
            usage_fatal "${1}"
            exit 1
            ;;
    esac
done
